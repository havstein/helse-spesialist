# This file was generated. Do not edit manually.

schema {
    query: Query
}

interface GraphQLHendelse {
    eksternDokumentId: String!
    id: String!
    type: GraphQLHendelsetype!
}

interface GraphQLTidslinjeperiode {
    erForkastet: Boolean!
    fom: LocalDate!
    hendelser: [GraphQLHendelse!]!
    inntektstype: GraphQLInntektstype!
    opprettet: LocalDateTime!
    periodetilstand: GraphQLPeriodetilstand!
    periodetype: GraphQLPeriodetype!
    skjaeringstidspunkt: LocalDate!
    tidslinje: [GraphQLDag!]!
    tom: LocalDate!
    vedtaksperiodeId: UUID!
}

interface GraphQLVilkarsgrunnlag {
    arbeidsgiverrefusjoner: [GraphQLArbeidsgiverrefusjon!]!
    id: UUID!
    inntekter: [GraphQLArbeidsgiverinntekt!]!
    omregnetArsinntekt: Float!
    sammenligningsgrunnlag: Float
    skjaeringstidspunkt: LocalDate!
    sykepengegrunnlag: Float!
    vilkarsgrunnlagtype: GraphQLVilkarsgrunnlagtype!
}

type Alder {
    alderSisteSykedag: Int!
    oppfylt: Boolean!
}

type GraphQLArbeidsgiver {
    generasjoner: [GraphQLGenerasjon!]!
    ghostPerioder: [GraphQLGhostPeriode!]!
    id: UUID!
    organisasjonsnummer: String!
}

type GraphQLArbeidsgiverinntekt {
    arbeidsgiver: String!
    deaktivert: Boolean
    omregnetArsinntekt: GraphQLOmregnetArsinntekt
    sammenligningsgrunnlag: GraphQLSammenligningsgrunnlag
    skjonnsmessigFastsatt: GraphQLOmregnetArsinntekt
}

type GraphQLArbeidsgiverrefusjon {
    arbeidsgiver: String!
    refusjonsopplysninger: [GraphQLRefusjonselement!]!
}

type GraphQLBeregnetPeriode implements GraphQLTidslinjeperiode {
    beregningId: UUID!
    erForkastet: Boolean!
    fom: LocalDate!
    forbrukteSykedager: Int
    gjenstaendeSykedager: Int
    hendelser: [GraphQLHendelse!]!
    inntektstype: GraphQLInntektstype!
    maksdato: LocalDate!
    opprettet: LocalDateTime!
    periodetilstand: GraphQLPeriodetilstand!
    periodetype: GraphQLPeriodetype!
    periodevilkar: GraphQLPeriodevilkar!
    skjaeringstidspunkt: LocalDate!
    tidslinje: [GraphQLDag!]!
    tom: LocalDate!
    utbetaling: GraphQLUtbetaling!
    vedtaksperiodeId: UUID!
    vilkarsgrunnlagId: UUID
}

type GraphQLDag {
    begrunnelser: [GraphQLBegrunnelse!]
    dato: LocalDate!
    grad: Float
    kilde: GraphQLSykdomsdagkilde!
    sykdomsdagtype: GraphQLSykdomsdagtype!
    utbetalingsdagtype: GraphQLUtbetalingsdagType!
    utbetalingsinfo: GraphQLUtbetalingsinfo
}

type GraphQLGenerasjon {
    id: UUID!
    perioder: [GraphQLTidslinjeperiode!]!
}

type GraphQLGhostPeriode {
    deaktivert: Boolean!
    fom: LocalDate!
    id: UUID!
    organisasjonsnummer: String!
    skjaeringstidspunkt: LocalDate!
    tom: LocalDate!
    vilkarsgrunnlagId: UUID!
}

type GraphQLInfotrygdVilkarsgrunnlag implements GraphQLVilkarsgrunnlag {
    arbeidsgiverrefusjoner: [GraphQLArbeidsgiverrefusjon!]!
    id: UUID!
    inntekter: [GraphQLArbeidsgiverinntekt!]!
    omregnetArsinntekt: Float!
    sammenligningsgrunnlag: Float
    skjaeringstidspunkt: LocalDate!
    sykepengegrunnlag: Float!
    vilkarsgrunnlagtype: GraphQLVilkarsgrunnlagtype!
}

type GraphQLInntekterFraAOrdningen {
    maned: YearMonth!
    sum: Float!
}

type GraphQLInntektsmelding implements GraphQLHendelse {
    beregnetInntekt: Float!
    eksternDokumentId: String!
    id: String!
    mottattDato: LocalDateTime!
    type: GraphQLHendelsetype!
}

type GraphQLOmregnetArsinntekt {
    belop: Float!
    inntekterFraAOrdningen: [GraphQLInntekterFraAOrdningen!]
    kilde: GraphQLInntektskilde!
    manedsbelop: Float!
}

type GraphQLOppdrag {
    fagsystemId: String!
    simulering: GraphQLSimulering
    tidsstempel: LocalDateTime!
    utbetalingslinjer: [GraphQLUtbetalingslinje!]!
}

type GraphQLPeriodevilkar {
    alder: Alder!
    sykepengedager: Sykepengedager!
}

type GraphQLPerson {
    aktorId: String!
    arbeidsgivere: [GraphQLArbeidsgiver!]!
    dodsdato: LocalDate
    fodselsnummer: String!
    versjon: Int!
    vilkarsgrunnlag: [GraphQLVilkarsgrunnlag!]!
}

type GraphQLRefusjonselement {
    belop: Float!
    fom: LocalDate!
    meldingsreferanseId: UUID!
    tom: LocalDate
}

type GraphQLSammenligningsgrunnlag {
    belop: Float!
    inntekterFraAOrdningen: [GraphQLInntekterFraAOrdningen!]!
}

type GraphQLSimulering {
    perioder: [GraphQLSimuleringsperiode!]!
    totalbelop: Int!
}

type GraphQLSimuleringsdetaljer {
    antallSats: Int!
    belop: Int!
    faktiskFom: LocalDate!
    faktiskTom: LocalDate!
    klassekode: String!
    klassekodeBeskrivelse: String!
    konto: String!
    refunderesOrgNr: String!
    sats: Float!
    tilbakeforing: Boolean!
    typeSats: String!
    uforegrad: Int!
    utbetalingstype: String!
}

type GraphQLSimuleringsperiode {
    fom: LocalDate!
    tom: LocalDate!
    utbetalinger: [GraphQLSimuleringsutbetaling!]!
}

type GraphQLSimuleringsutbetaling {
    detaljer: [GraphQLSimuleringsdetaljer!]!
    feilkonto: Boolean!
    forfall: LocalDate!
    utbetalesTilId: String!
    utbetalesTilNavn: String!
}

type GraphQLSoknadArbeidsgiver implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    sendtArbeidsgiver: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLSoknadArbeidsledig implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    sendtNav: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLSoknadFrilans implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    sendtNav: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLSoknadNav implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    sendtNav: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLSoknadSelvstendig implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    sendtNav: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLSpleisVilkarsgrunnlag implements GraphQLVilkarsgrunnlag {
    antallOpptjeningsdagerErMinst: Int!
    arbeidsgiverrefusjoner: [GraphQLArbeidsgiverrefusjon!]!
    avviksprosent: Float
    grunnbelop: Int!
    id: UUID!
    inntekter: [GraphQLArbeidsgiverinntekt!]!
    omregnetArsinntekt: Float!
    oppfyllerKravOmMedlemskap: Boolean
    oppfyllerKravOmMinstelonn: Boolean!
    oppfyllerKravOmOpptjening: Boolean!
    opptjeningFra: LocalDate!
    sammenligningsgrunnlag: Float
    skjaeringstidspunkt: LocalDate!
    skjonnsmessigFastsattAarlig: Float
    sykepengegrunnlag: Float!
    sykepengegrunnlagsgrense: GraphQLSykepengegrunnlagsgrense!
    vilkarsgrunnlagtype: GraphQLVilkarsgrunnlagtype!
}

type GraphQLSykdomsdagkilde {
    id: UUID!
    type: GraphQLSykdomsdagkildetype!
}

type GraphQLSykepengegrunnlagsgrense {
    grense: Int!
    grunnbelop: Int!
    virkningstidspunkt: LocalDate!
}

type GraphQLSykmelding implements GraphQLHendelse {
    eksternDokumentId: String!
    fom: LocalDate!
    id: String!
    rapportertDato: LocalDateTime!
    tom: LocalDate!
    type: GraphQLHendelsetype!
}

type GraphQLUberegnetPeriode implements GraphQLTidslinjeperiode {
    erForkastet: Boolean!
    fom: LocalDate!
    hendelser: [GraphQLHendelse!]!
    inntektstype: GraphQLInntektstype!
    opprettet: LocalDateTime!
    periodetilstand: GraphQLPeriodetilstand!
    periodetype: GraphQLPeriodetype!
    skjaeringstidspunkt: LocalDate!
    tidslinje: [GraphQLDag!]!
    tom: LocalDate!
    vedtaksperiodeId: UUID!
}

type GraphQLUberegnetVilkarsprovdPeriode implements GraphQLTidslinjeperiode {
    erForkastet: Boolean!
    fom: LocalDate!
    hendelser: [GraphQLHendelse!]!
    inntektstype: GraphQLInntektstype!
    opprettet: LocalDateTime!
    periodetilstand: GraphQLPeriodetilstand!
    periodetype: GraphQLPeriodetype!
    skjaeringstidspunkt: LocalDate!
    tidslinje: [GraphQLDag!]!
    tom: LocalDate!
    vedtaksperiodeId: UUID!
    vilkarsgrunnlagId: UUID!
}

type GraphQLUtbetaling {
    arbeidsgiverFagsystemId: String!
    arbeidsgiverNettoBelop: Int!
    arbeidsgiveroppdrag: GraphQLOppdrag
    id: UUID!
    personFagsystemId: String!
    personNettoBelop: Int!
    personoppdrag: GraphQLOppdrag
    status: String! @deprecated(reason: "Burde bruke enum \"statusEnum\"")
    statusEnum: GraphQLUtbetalingstatus!
    type: String! @deprecated(reason: "Burde bruke enum \"typeEnum\"")
    typeEnum: Utbetalingtype!
    vurdering: GraphQLVurdering
}

type GraphQLUtbetalingsinfo {
    arbeidsgiverbelop: Int
    inntekt: Int
    personbelop: Int
    refusjonsbelop: Int
    totalGrad: Float
    utbetaling: Int
}

type GraphQLUtbetalingslinje {
    dagsats: Int!
    fom: LocalDate!
    grad: Int!
    tom: LocalDate!
}

type GraphQLVilkarsgrunnlaghistorikk {
    grunnlag: [GraphQLVilkarsgrunnlag!]!
    id: UUID!
}

type GraphQLVurdering {
    automatisk: Boolean!
    godkjent: Boolean!
    ident: String!
    tidsstempel: LocalDateTime!
}

"Query object"
type Query {
    person(fnr: String!): GraphQLPerson
}

type Sykepengedager {
    forbrukteSykedager: Int
    gjenstaendeSykedager: Int
    maksdato: LocalDate!
    oppfylt: Boolean!
    skjaeringstidspunkt: LocalDate!
}

enum GraphQLBegrunnelse {
    AndreYtelser
    EgenmeldingUtenforArbeidsgiverperiode
    EtterDodsdato
    ManglerMedlemskap
    ManglerOpptjening
    MinimumInntekt
    MinimumInntektOver67
    MinimumSykdomsgrad
    Over70
    SykepengedagerOppbrukt
    SykepengedagerOppbruktOver67
}

enum GraphQLHendelsetype {
    Inntektsmelding
    NySoknad
    SendtSoknadArbeidsgiver
    SendtSoknadArbeidsledig
    SendtSoknadFrilans
    SendtSoknadNav
    SendtSoknadSelvstendig
    Ukjent
}

enum GraphQLInntektskilde {
    AOrdningen
    IkkeRapportert
    Infotrygd
    Inntektsmelding
    Saksbehandler
    SkjonnsmessigFastsatt
}

enum GraphQLInntektstype {
    EnArbeidsgiver
    FlereArbeidsgivere
}

enum GraphQLPeriodetilstand {
    AnnulleringFeilet
    Annullert
    ForberederGodkjenning
    IngenUtbetaling
    ManglerInformasjon
    RevurderingFeilet
    TilAnnullering
    TilGodkjenning
    TilInfotrygd
    TilSkjonnsfastsettelse
    TilUtbetaling
    UtbetalingFeilet
    Utbetalt
    UtbetaltVenterPaAnnenPeriode
    VenterPaAnnenPeriode
}

enum GraphQLPeriodetype {
    Forlengelse
    Forstegangsbehandling
    Infotrygdforlengelse
    OvergangFraIt
}

enum GraphQLSykdomsdagkildetype {
    Inntektsmelding
    Saksbehandler
    Soknad
    Sykmelding
    Ukjent
}

enum GraphQLSykdomsdagtype {
    AndreYtelserAap
    AndreYtelserDagpenger
    AndreYtelserForeldrepenger
    AndreYtelserOmsorgspenger
    AndreYtelserOpplaringspenger
    AndreYtelserPleiepenger
    AndreYtelserSvangerskapspenger
    ArbeidIkkeGjenopptattDag
    Arbeidsdag
    Arbeidsgiverdag
    Avslatt
    Feriedag
    ForeldetSykedag
    FriskHelgedag
    Permisjonsdag
    SykHelgedag
    Sykedag
    SykedagNav
    Ubestemtdag
}

enum GraphQLUtbetalingsdagType {
    Arbeidsdag
    ArbeidsgiverperiodeDag
    AvvistDag
    Feriedag
    ForeldetDag
    Helgedag
    NavDag
    NavHelgDag
    UkjentDag
}

enum GraphQLUtbetalingstatus {
    Annullert
    Forkastet
    Godkjent
    GodkjentUtenUtbetaling
    IkkeGodkjent
    Overfort
    Sendt
    Ubetalt
    UtbetalingFeilet
    Utbetalt
}

enum GraphQLVilkarsgrunnlagtype {
    Infotrygd
    Spleis
    Ukjent
}

enum Utbetalingtype {
    ANNULLERING
    ETTERUTBETALING
    FERIEPENGER
    REVURDERING
    UTBETALING
}

scalar LocalDate

scalar LocalDateTime

"The Long scalar type represents a signed 64-bit numeric non-fractional value"
scalar Long

"The Short scalar type represents a signed 16-bit numeric non-fractional value"
scalar Short

scalar UUID

scalar YearMonth
